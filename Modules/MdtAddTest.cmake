# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying
# file Copyright.txt or https://cmake.org/licensing for details.

#.rst:
# MdtAddTest
# ----------
#
# .. contents:: Contents
#    :local:
#
# Add a test
# ^^^^^^^^^^^^^
#
# .. command:: mdt_add_test
#
# Add a test::
#
#   mdt_add_test(
#     NAME name
#     TARGET target
#     [DEPENDENCIES dependencies]
#     SOURCE_FILES
#       file1.cpp
#       file2.cpp
#   )
#
# Will add a executable target named ``target`` using :command:`add_executable()`,
# then add a test using :command:`add_test()`.
#
# See also :command:`mdt_set_test_library_env_path()`
# and :command:`mdt_target_libraries_to_library_env_path()`.
#
# Example:
#
# .. code-block:: cmake
#
#   mdt_add_test(
#     NAME MyTest
#     TARGET MyTestTarget
#     DEPENDENCIES My::LibA Qt5::Test
#     SOURCE_FILES
#       MyTest.cpp
#   )
#
# Above example is similar to:
#
# .. code-block:: cmake
#
#   add_executable(
#     MyTestTarget
#     MyTest.cpp
#   )
#
#   target_link_libraries(MyTestTarget
#     PRIVATE My::LibA Qt5::Test
#   )
#
#   add_test(
#     NAME MyTest
#     COMMAND MyTestTarget
#   )
#
#   mdt_set_test_library_env_path(
#     NAME MyTest
#     TARGET MyTestTarget
#   )
#
#
# An advice when using Catch2
# ^^^^^^^^^^^^^^^^^^^^^^^^^^^
#
# Catch2 is a powerful test framework for C++.
# See also https://github.com/catchorg/Catch2
#
# A downside is that tests can take very long to compile,
# especially those that contains the main (generated by Catch2).
#
# The why and how to avoid slow compilations is explained
# int the documentation: https://github.com/catchorg/Catch2/blob/master/docs/slow-compiles.md#top
#
# In this chapter, a simple solution, based on CMake, will be explained.
#
# At some place, for example at the root of your source tree,
# create a file named `Catch2Main.cpp`::
#
#   #define CATCH_CONFIG_MAIN
#   #include "catch2/catch.hpp"
#
# In your main `CMakeLists.txt` (or any other one),
# create a static library:
#
# .. code-block:: cmake
#
#   if(BUILD_TESTS)
#     find_package(Catch2 REQUIRED)
#
#     add_library(MyProject_Catch2Main STATIC Catch2Main.cpp)
#     target_link_libraries(MyProject_Catch2Main PUBLIC Catch2::Catch2)
#     add_library(MyProject::Catch2Main ALIAS MyProject_Catch2Main)
#   endif()
#
#
# In your tests that uses `Catch2`, include the catch2 header,
# but do not define `CATCH_CONFIG_MAIN`::
#
#   #include "catch2/catch.hpp"
#
#   TEST_CASE("MyTest")
#   {
#     ...
#   }
#
# Then make your test depend on the Catch2Main library:
#
# .. code-block:: cmake
#
#   add_executable(MyTestTarget
#     MyTest.cpp
#   )
#
#   target_link_libraries(MyTestTarget
#     PRIVATE MyProject::Catch2Main
#   )
#
# Or using :command:`mdt_add_test()`:
#
# .. code-block:: cmake
#
#   mdt_add_test(
#     NAME MyTest
#     TARGET MyTestTarget
#     DEPENDENCIES MyProject::Catch2Main
#     SOURCE_FILES
#       MyTest.cpp
#   )
#

include(MdtRuntimeEnvironment)


function(mdt_add_test)

  set(options)
  set(oneValueArgs NAME TARGET)
  set(multiValueArgs DEPENDENCIES SOURCE_FILES)
  cmake_parse_arguments(ARG "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})

  if(NOT ARG_NAME)
    message(FATAL_ERROR "mdt_add_test(): mandatory argument NAME missing")
  endif()
  if(NOT ARG_TARGET)
    message(FATAL_ERROR "mdt_add_test(): mandatory argument TARGET missing")
  endif()
  if(NOT ARG_SOURCE_FILES)
    message(FATAL_ERROR "mdt_add_test(): at least one source file expected")
  endif()
  if(ARG_UNPARSED_ARGUMENTS)
    message(FATAL_ERROR "mdt_add_test(): unknown arguments passed: ${ARG_UNPARSED_ARGUMENTS}")
  endif()

  add_executable(${ARG_TARGET} ${ARG_SOURCE_FILES})

  if(ARG_DEPENDENCIES)
    target_link_libraries(${ARG_TARGET} PRIVATE ${ARG_DEPENDENCIES})
  endif()

  add_test(NAME ${ARG_NAME} COMMAND ${ARG_TARGET})

  mdt_set_test_library_env_path(NAME ${ARG_NAME} TARGET ${ARG_TARGET})

endfunction()
